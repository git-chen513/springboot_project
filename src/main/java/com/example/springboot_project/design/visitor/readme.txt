需求：某歌唱比赛，将观众分为男人、女人，对歌手的表演进行评价；
有多种不同的评价，例如：成功、失败等。

传统方式实现这个需求：
设计一个Person接口，有一个评分的方法，
男人类和女人类分别继承这个接口，并单独实现评分方法，
由于有多种不同的评价，因此通过传递参数的不同，
使用if/else逻辑进行判断，打印出评分的结果。

传统方式的弊端就是：由于评价的类型有多种，
如果增加新的评价类型，需要对Person接口的每个子类都进行改造，
增加if/else分支，违反了ocp原则。

访问者模式：
使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。
例如歌唱比赛评分例子中，传统模式评分方法需要用if/else逻辑进行不同的评分，而使用访问者模式则不需要，
评分的方法是根据传入访问者的不同而执行不同的处理逻辑。

访问者模式属于行为型模式。根据模式，元素对象已接受访问者对象，
这样访问者对象就可以处理元素对象上的操作。

访问者模式主要将数据结构与数据操作分离，解决稳定的数据结构和易变的操作耦合问题。
对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。
例如男人类和女人类就属于稳定的数据结构，而评分的类型，例如成功、失败则属于易变的数据操作。

优点：满足ocp原则，当增加新的数据操作（例如新的评分类型），
只需要写一个新的访问者实现访问者接口即可，不需要改变原有类的代码。

缺点：
1、具体元素对访问者公布细节，违反了迪米特原则。（例如访问者知道男人类有testMan方法）
2、具体元素变更比较困难。（如果增加新的元素类，则访问者接口需要增加针对该元素类的方法，具体的访问者类也需要修改）
3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。（例如访问者接口中的方法依赖的都是具体元素类）